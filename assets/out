#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

resource_dir=$(dirname $0)

source $resource_dir/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

cd $source

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/maven-resource-request.XXXXXX)

cat > $payload <&0

url=$(jq -r '.source.url // ""' < $payload)
artifact=$(jq -r '.source.artifact // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
skip_cert_check=$(jq -r '.source.skip_cert_check // ""' < $payload)
repository_cert=$(jq -r '.source.repository_cert // ""' < $payload)

file=$(jq -r '.params.file // ""' < $payload)
pom_file=$(jq -r '.params.pom_file // ""' < $payload)
version_file=$(jq -r '.params.version_file // ""' < $payload)

sourceMavenOpts=$(jq -r '.source.maven_opts // ""' < $payload)
sourceMavenConfig=$(jq -r '.source.maven_config // ""' < $payload)
paramsMavenOpts=$(jq -r '.params.maven_opts // ""' < $payload)
paramsMavenConfig=$(jq -r '.params.maven_config // ""' < $payload)

# Allow overriding the source config values
export MAVEN_OPTS=${paramsMavenOpts:-$sourceMavenOpts}
export MAVEN_CONFIG=${paramsMavenConfig:-$sourceMavenConfig}
export MAVEN_BASEDIR=$resource_dir

# groupId:artifactId:type[:classifier]
groupId=$(get_group_id $artifact)
artifactId=$(get_artifact_id $artifact)
packaging=$(get_packaging $artifact)
classifier=$(get_classifier $artifact)

# Use ours if user didn't specify
[ -z "$MAVEN_CONFIG" ] && MAVEN_CONFIG="-s $(dirname $0)/.mvn/settings.xml"

# TODO: Add more error checking
if [ -z "$url" ]; then
  echo "invalid payload (missing url)"
  exit 1
fi

if [ -z "$file" ]; then
  echo "invalid payload (missing file)"
  exit 1
fi

# transform this: build-output/your-artifact-*.jar
#      into this: build-output/your-artifact-1.0.0-rc.0.jar
file=$(ls $file)
pom_file=$(ls $pom_file)
version=$(cat $version_file)

if [ "$skip_cert_check" = "true" ]; then
  MAVEN_OPTS="-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true"
elif [ -n "$repository_cert" ]; then
  mkdir $source/ssl
  echo "$repository_cert" > $source/ssl/repository.crt
  keytool -import -file $source/ssl/repository.crt -alias CAAlias -keystore $source/ssl/truststore.jks -storepass changeit -noprompt
  MAVEN_OPTS="$MAVEN_OPTS -Djavax.net.ssl.trustStore=$source/ssl/truststore.jks \
                          -Djavax.net.ssl.trustStorePassword=changeit"
fi

args=
args="$args -Dfile=$file"
args="$args -Durl=$url"
args="$args -DgroupId=$groupId"
args="$args -DartifactId=$artifactId"
args="$args -Dversion=$version"
args="$args -Dpackaging=$packaging"

[ -f "$pom_file" ]   && args="$args -DpomFile=$pom_file"
[ -n "$classifier" ] && args="$args -Dclassifier=$classifier"
[ -n "$username" ]   && args="$args -Drepository.username=$username";
[ -n "$password" ]   && args="$args -Drepository.password=$password";

$resource_dir/mvnw deploy:deploy-file $args

jq -n "{
  version: {version: $(echo $version | jq -R .)}
}" >&3
