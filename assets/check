#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/maven-resource-request.XXXXXX)
working=$TMPDIR/maven-resource-working

cat > $payload <&0

debug=$(jq -r '.source.debug //empty' < $payload)
if [ "$debug" = "true" ]; then
  set -x
fi

release_url=$(jq -r '.source.url //empty' < $payload)
snapshot_url=$(jq -r '.source.snapshot_url //empty' < $payload)
artifact=$(jq -r '.source.artifact //empty' < $payload)
version=$(jq -r '.version.version //empty' < $payload)
username=$(jq -r '.source.username //empty' < $payload)
password=$(jq -r '.source.password //empty' < $payload)
skip_cert_check=$(jq -r '.source.skip_cert_check //empty' < $payload)
repository_cert=$(jq -r '.source.repository_cert //empty' < $payload)

# TODO: Add more error checking
if [ -z "$release_url" ] && [ -z "$snapshot_url" ] ; then
  echo "invalid payload (must specify url or snapshot_url)"
  exit 1
fi

# groupId:artifactId:type[:classifier]
groupId=$(get_group_id $artifact)
artifactId=$(get_artifact_id $artifact)
packaging=$(get_packaging $artifact)

auth=""
if [ -n "$username" ]; then
  auth="--user $username:$password"
fi

cert=""
if [ "$skip_cert_check" = "true" ]; then
  cert="-k"
elif [ -n "$repository_cert" ]; then
  mkdir -p $working/ssl
  echo "$repository_cert" > $working/ssl/repository.crt
  cert="--cacert $working/ssl/repository.crt"
fi

# convert 1.0.0-20170328.031519-19 to 1.0.0-SNAPSHOT
uniqueVersion=$(echo "$version" | grep -oE "[0-9]{8}\.[0-9]{6}-[0-9]{1,}" || true)
if [ -n "$uniqueVersion" ]; then
  version=$(echo ${version%-$uniqueVersion}-SNAPSHOT)
fi

url=$release_url
if [[ "$version" = *-SNAPSHOT ]]; then
  if [ -n "$snapshot_url" ]; then
    url=$snapshot_url
  fi
  metadataUrl="$url/${groupId//.//}/$artifactId/$version/maven-metadata.xml"
else
  metadataUrl="$url/${groupId//.//}/$artifactId/maven-metadata.xml"
fi

metadata=$(curl -s $cert $auth $metadataUrl)

declare -a versions=( )
if [[ "$version" = *-SNAPSHOT ]]; then
  versions[1]=$(echo $metadata | xmllint --xpath "/metadata/versioning/snapshotVersions/snapshotVersion[extension='$packaging']/value/text()" - 2>/dev/null)
elif [ "$version" = "latest" ] || [ -z "$version" ]; then
  versions[1]=$(echo $metadata | xmllint --xpath "/metadata/versioning/versions/version[last()]/text()" - 2>/dev/null)
else
  itemsCount=$(echo $metadata | xmllint --xpath 'count(/metadata/versioning/versions/version)' - 2>/dev/null)
  found=false
  for (( i=1; i <= $itemsCount; i++ )); do

    current=$(echo $metadata | xmllint --xpath "/metadata/versioning/versions/version[$i]/text()" - 2>/dev/null)
    if [ "$found" = false ] && [ "$current" = "$version" ]; then
      found=true
    fi

    if [ "$found" = true ]; then
      versions[$i]=$current
    fi
  done
fi

printf "%s\n" "${versions[@]}" | sed 's/.*/{ "version": "&" }/' | jq --slurp . >&3
